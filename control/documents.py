# documents.py
import logging
import os
import time
from datetime import datetime
from config import DESKTOP_PATH, DOCUMENTS_PATH, DEFAULT_DOC_FORMAT

# Optional imports with fallbacks
try:
    from docx import Document
    from docx.shared import Inches
    DOCX_AVAILABLE = True
except ImportError:
    logging.warning("python-docx not available, Word document features disabled")
    DOCX_AVAILABLE = False

try:
    from reportlab.lib.pagesizes import letter
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    REPORTLAB_AVAILABLE = True
except ImportError:
    logging.warning("reportlab not available, PDF features disabled")
    REPORTLAB_AVAILABLE = False

try:
    import win32com.client as win32
    WIN32_AVAILABLE = True
except ImportError:
    logging.warning("win32com not available, some Windows features disabled")
    WIN32_AVAILABLE = False

class DocumentController:
    def __init__(self):
        self.desktop_path = DESKTOP_PATH
        self.documents_path = DOCUMENTS_PATH
        self.word_app = None
    
    def create_document(self, content: str, title: str = "Document", format: str = DEFAULT_DOC_FORMAT) -> str:
        """Create a document with specified content"""
        try:
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            filename = f"{title}_{timestamp}.{format}"
            filepath = os.path.join(self.desktop_path, filename)
            
            if format.lower() == "docx":
                return self._create_docx(content, filepath, title)
            elif format.lower() == "pdf":
                return self._create_pdf(content, filepath, title)
            elif format.lower() == "txt":
                return self._create_txt(content, filepath)
            else:
                raise ValueError(f"Unsupported format: {format}")
        
        except Exception as e:
            logging.error(f"Error creating document: {e}")
            return None
    
    def _create_docx(self, content: str, filepath: str, title: str) -> str:
        """Create a Word document"""
        try:
            doc = Document()
            
            # Add title
            title_paragraph = doc.add_heading(title, level=1)
            
            # Add content
            paragraphs = content.split('\n\n')
            for paragraph in paragraphs:
                if paragraph.strip():
                    doc.add_paragraph(paragraph.strip())
            
            # Add footer with timestamp
            footer = doc.sections[0].footer
            footer_para = footer.paragraphs[0]
            footer_para.text = f"Generated by Shadow AI - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
            
            doc.save(filepath)
            logging.info(f"DOCX document created: {filepath}")
            return filepath
        
        except Exception as e:
            logging.error(f"Error creating DOCX: {e}")
            return None
    
    def _create_pdf(self, content: str, filepath: str, title: str) -> str:
        """Create a PDF document"""
        try:
            doc = SimpleDocTemplate(filepath, pagesize=letter)
            story = []
            styles = getSampleStyleSheet()
            
            # Title
            title_style = ParagraphStyle(
                'CustomTitle',
                parent=styles['Title'],
                fontSize=18,
                spaceAfter=30,
                textColor='black'
            )
            story.append(Paragraph(title, title_style))
            story.append(Spacer(1, 12))
            
            # Content
            paragraphs = content.split('\n\n')
            for paragraph in paragraphs:
                if paragraph.strip():
                    story.append(Paragraph(paragraph.strip(), styles['Normal']))
                    story.append(Spacer(1, 12))
            
            # Footer
            footer_style = ParagraphStyle(
                'Footer',
                parent=styles['Normal'],
                fontSize=8,
                textColor='grey'
            )
            story.append(Spacer(1, 30))
            story.append(Paragraph(f"Generated by Shadow AI - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}", footer_style))
            
            doc.build(story)
            logging.info(f"PDF document created: {filepath}")
            return filepath
        
        except Exception as e:
            logging.error(f"Error creating PDF: {e}")
            return None
    
    def _create_txt(self, content: str, filepath: str) -> str:
        """Create a text file"""
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
                f.write(f"\n\n---\nGenerated by Shadow AI - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
            
            logging.info(f"TXT document created: {filepath}")
            return filepath
        
        except Exception as e:
            logging.error(f"Error creating TXT: {e}")
            return None
    
    def open_word(self, filepath: str = None) -> bool:
        """Open Microsoft Word"""
        try:
            self.word_app = win32.Dispatch("Word.Application")
            self.word_app.Visible = True
            
            if filepath and os.path.exists(filepath):
                self.word_app.Documents.Open(filepath)
                logging.info(f"Opened Word document: {filepath}")
            else:
                self.word_app.Documents.Add()
                logging.info("Opened new Word document")
            
            return True
        
        except Exception as e:
            logging.error(f"Error opening Word: {e}")
            return False
    
    def open_notepad(self, filepath: str = None) -> bool:
        """Open Notepad"""
        try:
            import subprocess
            if filepath and os.path.exists(filepath):
                subprocess.Popen(["notepad.exe", filepath])
                logging.info(f"Opened Notepad with file: {filepath}")
            else:
                subprocess.Popen(["notepad.exe"])
                logging.info("Opened new Notepad")
            
            return True
        
        except Exception as e:
            logging.error(f"Error opening Notepad: {e}")
            return False
    
    def save_word_as_pdf(self, word_filepath: str, pdf_filepath: str = None) -> str:
        """Convert Word document to PDF"""
        try:
            if not pdf_filepath:
                pdf_filepath = word_filepath.replace('.docx', '.pdf')
            
            word_app = win32.Dispatch("Word.Application")
            doc = word_app.Documents.Open(word_filepath)
            doc.SaveAs2(pdf_filepath, FileFormat=17)  # 17 = PDF format
            doc.Close()
            word_app.Quit()
            
            logging.info(f"Word document converted to PDF: {pdf_filepath}")
            return pdf_filepath
        
        except Exception as e:
            logging.error(f"Error converting Word to PDF: {e}")
            return None
    
    def generate_leave_letter(self, reason: str = "health reasons", date: str = None) -> str:
        """Generate a leave letter"""
        if not date:
            date = datetime.now().strftime("%Y-%m-%d")
        
        content = f"""Subject: Application for Casual Leave

Dear Sir/Madam,

I am writing to request a casual leave for {date} due to {reason}.

I have ensured that all my pending work is up to date and have informed my colleagues about my absence. I will be available via email if there are any urgent matters that require my attention.

I kindly request you to grant me leave for the mentioned date. I will resume work the following day.

Thank you for your understanding.

Yours sincerely,
[Your Name]
[Your Department]
[Your Contact Information]"""
        
        return self.create_document(content, "Leave_Letter", "docx")
    
    def generate_resume_template(self, name: str = "[Your Name]") -> str:
        """Generate a resume template"""
        content = f"""{name}
[Your Address]
[City, State ZIP Code]
[Your Email]
[Your Phone Number]

OBJECTIVE
A highly motivated and skilled professional seeking opportunities to contribute to organizational growth while developing my career in [Your Field].

EDUCATION
[Degree] in [Field of Study]
[University Name] - [Year]
GPA: [Your GPA]

EXPERIENCE
[Job Title] - [Company Name] ([Start Date] - [End Date])
• [Achievement or responsibility]
• [Achievement or responsibility]
• [Achievement or responsibility]

SKILLS
• Technical Skills: [List your technical skills]
• Soft Skills: [List your soft skills]
• Languages: [Languages you speak]

CERTIFICATIONS
• [Certification Name] - [Issuing Organization] ([Year])
• [Certification Name] - [Issuing Organization] ([Year])

PROJECTS
[Project Name] - [Brief Description]
• [Key achievement or technology used]
• [Key achievement or technology used]

ACHIEVEMENTS
• [Achievement 1]
• [Achievement 2]
• [Achievement 3]"""
        
        return self.create_document(content, "Resume_Template", "docx")
    
    def type_in_word(self, text: str) -> bool:
        """Type text in the active Word document"""
        try:
            if not self.word_app:
                self.open_word()
            
            self.word_app.Selection.TypeText(text)
            logging.info("Text typed in Word document")
            return True
        
        except Exception as e:
            logging.error(f"Error typing in Word: {e}")
            return False
    
    def close_word(self) -> bool:
        """Close Word application"""
        try:
            if self.word_app:
                self.word_app.Quit()
                self.word_app = None
                logging.info("Word application closed")
            return True
        
        except Exception as e:
            logging.error(f"Error closing Word: {e}")
            return False

# Global document controller instance
document_controller = DocumentController()

def create_document(content: str, title: str = "Document", format: str = DEFAULT_DOC_FORMAT) -> str:
    """Create a document with specified content"""
    return document_controller.create_document(content, title, format)

def generate_leave_letter(reason: str = "health reasons", date: str = None) -> str:
    """Generate a leave letter"""
    return document_controller.generate_leave_letter(reason, date)

def generate_resume_template(name: str = "[Your Name]") -> str:
    """Generate a resume template"""
    return document_controller.generate_resume_template(name)

def open_word(filepath: str = None) -> bool:
    """Open Microsoft Word"""
    return document_controller.open_word(filepath)

def open_notepad(filepath: str = None) -> bool:
    """Open Notepad"""
    return document_controller.open_notepad(filepath)

def save_word_as_pdf(word_filepath: str, pdf_filepath: str = None) -> str:
    """Convert Word document to PDF"""
    return document_controller.save_word_as_pdf(word_filepath, pdf_filepath)
